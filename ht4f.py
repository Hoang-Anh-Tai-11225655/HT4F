# -*- coding: utf-8 -*-
"""HT4F.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17oMzSlpOWSVwZlRCVX0GDyzVr1N31g9L
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from keras.callbacks import ModelCheckpoint
from keras.models import load_model

from keras.models import Sequential
from keras.layers import LSTM
from keras.layers import Dropout
from keras.layers import Dense


from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_absolute_percentage_error
from sklearn.metrics import mean_squared_error

from matplotlib.dates import YearLocator, DateFormatter, MonthLocator

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/dataset/HPG data set.csv')
df = df.drop(columns=["KL"])
print(df)

df["Ngày"] = pd.to_datetime(df.Ngày,format="%d/%m/%Y")

df.shape

df.head()

df.info()

df.describe()

df['Ngày'] = pd.to_datetime(df['Ngày'], format='%d/%m/%Y')
df = df.sort_values(by='Ngày')


df['Đóng cửa'] = df['Đóng cửa'].astype(str).str.replace(',', '').astype(float)
df['Mở cửa'] = df['Mở cửa'].astype(str).str.replace(',', '').astype(float)
df['Cao nhất'] = df['Cao nhất'].astype(str).str.replace(',', '').astype(float)
df['Thấp nhất'] = df['Thấp nhất'].astype(str).str.replace(',', '').astype(float)


df['Đóng cửa'] = df['Đóng cửa'].replace(',', '').astype(float)
df['Mở cửa'] = df['Mở cửa'].replace(',', '').astype(float)
df['Cao nhất'] = df['Cao nhất'].replace(',', '').astype(float)
df['Thấp nhất'] = df['Thấp nhất'].replace(',', '').astype(float)


df['Năm'] = df['Ngày'].dt.year


plt.figure(figsize=(10, 5))
plt.plot(df['Ngày'], df['Đóng cửa'], label='Giá đóng cửa', color='red')
plt.xlabel('Năm')
plt.ylabel('Giá đóng cửa')
plt.title('Biểu đồ giá đóng cửa của HPG qua các năm')
plt.legend(loc='best')

years = YearLocator()
yearsFmt = DateFormatter('%Y')
months = MonthLocator()
plt.gca().xaxis.set_major_locator(years)
plt.gca().xaxis.set_major_formatter(yearsFmt)
plt.gca().xaxis.set_minor_locator(months)

plt.tight_layout()
plt.show()

df1 = pd.DataFrame(df,columns=['Ngày','Đóng cửa'])
df1.index = df1.Ngày
df1.drop('Ngày',axis=1,inplace=True)
df1

df1.dropna(inplace =True)
df1.isnull().sum()

data = df1.values
train_data = data[:1035]
test_data = data[1035:]

sc = MinMaxScaler(feature_range=(0,1))
sc_train = sc.fit_transform(data)

x_train,y_train=[],[]
for i in range(50,len(train_data)):
  x_train.append(sc_train[i-50:i,0])
  y_train.append(sc_train[i,0])

x_train = np.array(x_train)
y_train = np.array(y_train)

x_train = np.reshape(x_train,(x_train.shape[0],x_train.shape[1],1))
y_train = np.reshape(y_train,(y_train.shape[0],1))

model = Sequential()
model.add(LSTM(units=128,input_shape=(x_train.shape[1],1),return_sequences=True))
model.add(LSTM(units=64))
model.add(Dropout(0.5))
model.add(Dense(1))
model.compile(loss='mean_absolute_error',optimizer='adam')

save_model = "/content/drive/MyDrive/dataset/savemodel/train.hdf5"
best_model = ModelCheckpoint(save_model,monitor='loss',verbose=1,save_best_only=True,mode='auto')
model.fit(x_train,y_train,epochs=100,batch_size=50,verbose=2,callbacks=[best_model])

y_train = sc.inverse_transform(y_train)
final_model = load_model("/content/drive/MyDrive/dataset/savemodel/train.hdf5")
y_train_predict = final_model.predict(x_train)
y_train_predict = sc.inverse_transform(y_train_predict)

test = df1[len(train_data)-50:].values
test = test.reshape(-1,1)
sc_test = sc.transform(test)

x_test = []
for i in range(50,test.shape[0]):
  x_test.append(sc_test[i-50:i,0])
x_test = np.array(x_test)
x_test = np.reshape(x_test,(x_test.shape[0],x_test.shape[1],1))


y_test = data[1035:]
y_test_predict = final_model.predict(x_test)
y_test_predict = sc.inverse_transform(y_test_predict)

train_data1 = df1[50:1035]
test_data1 = df1[1035:]

plt.figure(figsize=(24,8))
plt.plot(df1,label='Giá thực tế',color='red')
train_data1['Dự đoán'] = y_train_predict
plt.plot(train_data1['Dự đoán'],label='Giá dự đoán train',color='green')
test_data1['Dự đoán'] = y_test_predict
plt.plot(test_data1['Dự đoán'],label='Giá dự đoán test',color='blue')
plt.title('So sánh giá dự báo và giá thực tế')
plt.xlabel('Thời gian')
plt.ylabel('Giá đóng cửa (VNĐ)')
plt.legend()
plt.show()

#r2
print('Độ phù hợp tập train:',r2_score(y_train,y_train_predict))
#mape
print('Phần trăm sai số tuyệt đối trung bình tập train:',mean_absolute_percentage_error(y_train,y_train_predict))
#rmse
rmse = np.sqrt(mean_squared_error(y_train, y_train_predict))
print('Lỗi bình phương trung bình căn (RMSE) trên tập train:', rmse)

#r2
print('Độ phù hợp tập test:',r2_score(y_test,y_test_predict))
#mape
print('Phần trăm sai số tuyệt đối trung bình tập test:',mean_absolute_percentage_error(y_test,y_test_predict))
#rmse
rmse = np.sqrt(mean_squared_error(y_test, y_test_predict))
print('Lỗi bình phương trung bình căn (RMSE) trên tập test:', rmse)